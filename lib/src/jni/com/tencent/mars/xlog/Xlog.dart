// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `com.tencent.mars.xlog.Xlog`
class Xlog extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Xlog> $type;

  @_$jni.internal
  Xlog.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'com/tencent/mars/xlog/Xlog');

  /// The type which includes information such as the signature of this class.
  static const type = $Xlog$Type();

  /// from: `static public final int LEVEL_ALL`
  static const LEVEL_ALL = 0;

  /// from: `static public final int LEVEL_VERBOSE`
  static const LEVEL_VERBOSE = 0;

  /// from: `static public final int LEVEL_DEBUG`
  static const LEVEL_DEBUG = 1;

  /// from: `static public final int LEVEL_INFO`
  static const LEVEL_INFO = 2;

  /// from: `static public final int LEVEL_WARNING`
  static const LEVEL_WARNING = 3;

  /// from: `static public final int LEVEL_ERROR`
  static const LEVEL_ERROR = 4;

  /// from: `static public final int LEVEL_FATAL`
  static const LEVEL_FATAL = 5;

  /// from: `static public final int LEVEL_NONE`
  static const LEVEL_NONE = 6;

  /// from: `static public final int AppednerModeAsync`
  static const AppednerModeAsync = 0;

  /// from: `static public final int AppednerModeSync`
  static const AppednerModeSync = 1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Xlog() {
    return Xlog.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_open = _class.staticMethodId(
    r'open',
    r'(ZIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _open = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void open(boolean z, int i, int i1, java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3)`
  static void open(
    bool z,
    int i,
    int i1,
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    _$jni.JString string3,
  ) {
    _open(
            _class.reference.pointer,
            _id_open as _$jni.JMethodIDPtr,
            z ? 1 : 0,
            i,
            i1,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            string3.reference.pointer)
        .check();
  }

  static final _id_logV = _class.instanceMethodId(
    r'logV',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logV = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void logV(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logV(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logV(
            reference.pointer,
            _id_logV as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logD = _class.instanceMethodId(
    r'logD',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logD = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void logD(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logD(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logD(
            reference.pointer,
            _id_logD as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logI = _class.instanceMethodId(
    r'logI',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logI = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void logI(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logI(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logI(
            reference.pointer,
            _id_logI as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logW = _class.instanceMethodId(
    r'logW',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logW = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void logW(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logW(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logW(
            reference.pointer,
            _id_logW as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logE = _class.instanceMethodId(
    r'logE',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logE = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void logE(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logE(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logE(
            reference.pointer,
            _id_logE as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logF = _class.instanceMethodId(
    r'logF',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logF = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void logF(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logF(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logF(
            reference.pointer,
            _id_logF as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logWrite = _class.staticMethodId(
    r'logWrite',
    r'(Lcom/tencent/mars/xlog/Xlog$XLoggerInfo;Ljava/lang/String;)V',
  );

  static final _logWrite = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public native void logWrite(com.tencent.mars.xlog.Xlog$XLoggerInfo xLoggerInfo, java.lang.String string)`
  static void logWrite(
    _$jni.JObject xLoggerInfo,
    _$jni.JString string,
  ) {
    _logWrite(_class.reference.pointer, _id_logWrite as _$jni.JMethodIDPtr,
            xLoggerInfo.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_logWrite2 = _class.staticMethodId(
    r'logWrite2',
    r'(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logWrite2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public native void logWrite2(int i, java.lang.String string, java.lang.String string1, java.lang.String string2, int i1, int i2, long j, long j1, java.lang.String string3)`
  static void logWrite2(
    int i,
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i1,
    int i2,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logWrite2(
            _class.reference.pointer,
            _id_logWrite2 as _$jni.JMethodIDPtr,
            i,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i1,
            i2,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_getLogLevel = _class.instanceMethodId(
    r'getLogLevel',
    r'()I',
  );

  static final _getLogLevel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public native int getLogLevel()`
  int getLogLevel() {
    return _getLogLevel(
            reference.pointer, _id_getLogLevel as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setLogLevel = _class.staticMethodId(
    r'setLogLevel',
    r'(I)V',
  );

  static final _setLogLevel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public native void setLogLevel(int i)`
  static void setLogLevel(
    int i,
  ) {
    _setLogLevel(
            _class.reference.pointer, _id_setLogLevel as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setAppenderMode = _class.staticMethodId(
    r'setAppenderMode',
    r'(I)V',
  );

  static final _setAppenderMode = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public native void setAppenderMode(int i)`
  static void setAppenderMode(
    int i,
  ) {
    _setAppenderMode(_class.reference.pointer,
            _id_setAppenderMode as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setConsoleLogOpen = _class.staticMethodId(
    r'setConsoleLogOpen',
    r'(Z)V',
  );

  static final _setConsoleLogOpen = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public native void setConsoleLogOpen(boolean z)`
  static void setConsoleLogOpen(
    bool z,
  ) {
    _setConsoleLogOpen(_class.reference.pointer,
            _id_setConsoleLogOpen as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setErrLogOpen = _class.staticMethodId(
    r'setErrLogOpen',
    r'(Z)V',
  );

  static final _setErrLogOpen = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public native void setErrLogOpen(boolean z)`
  static void setErrLogOpen(
    bool z,
  ) {
    _setErrLogOpen(_class.reference.pointer,
            _id_setErrLogOpen as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_appenderOpen = _class.staticMethodId(
    r'appenderOpen',
    r'(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V',
  );

  static final _appenderOpen = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              int,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public native void appenderOpen(int i, int i1, java.lang.String string, java.lang.String string1, java.lang.String string2, int i2, java.lang.String string3)`
  static void appenderOpen(
    int i,
    int i1,
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i2,
    _$jni.JString string3,
  ) {
    _appenderOpen(
            _class.reference.pointer,
            _id_appenderOpen as _$jni.JMethodIDPtr,
            i,
            i1,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i2,
            string3.reference.pointer)
        .check();
  }

  static final _id_setMaxFileSize = _class.staticMethodId(
    r'setMaxFileSize',
    r'(J)V',
  );

  static final _setMaxFileSize = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public native void setMaxFileSize(long j)`
  static void setMaxFileSize(
    int j,
  ) {
    _setMaxFileSize(_class.reference.pointer,
            _id_setMaxFileSize as _$jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_setMaxAliveTime = _class.staticMethodId(
    r'setMaxAliveTime',
    r'(J)V',
  );

  static final _setMaxAliveTime = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public native void setMaxAliveTime(long j)`
  static void setMaxAliveTime(
    int j,
  ) {
    _setMaxAliveTime(_class.reference.pointer,
            _id_setMaxAliveTime as _$jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_appenderClose = _class.instanceMethodId(
    r'appenderClose',
    r'()V',
  );

  static final _appenderClose = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public native void appenderClose()`
  void appenderClose() {
    _appenderClose(reference.pointer, _id_appenderClose as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_appenderFlush = _class.instanceMethodId(
    r'appenderFlush',
    r'(Z)V',
  );

  static final _appenderFlush = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public native void appenderFlush(boolean z)`
  void appenderFlush(
    bool z,
  ) {
    _appenderFlush(reference.pointer, _id_appenderFlush as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }
}

final class $Xlog$Type extends _$jni.JObjType<Xlog> {
  @_$jni.internal
  const $Xlog$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/tencent/mars/xlog/Xlog;';

  @_$jni.internal
  @_$core.override
  Xlog fromReference(_$jni.JReference reference) =>
      Xlog.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Xlog$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Xlog$Type) && other is $Xlog$Type;
  }
}
