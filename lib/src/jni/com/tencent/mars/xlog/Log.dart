// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../../android/content/Context.dart' as context_;

/// from: `com.tencent.mars.xlog.Log$LogImp`
class Log_LogImp extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Log_LogImp> $type;

  @_$jni.internal
  Log_LogImp.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'com/tencent/mars/xlog/Log$LogImp');

  /// The type which includes information such as the signature of this class.
  static const type = $Log_LogImp$Type();
  static final _id_logV = _class.instanceMethodId(
    r'logV',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logV = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void logV(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logV(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logV(
            reference.pointer,
            _id_logV as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logI = _class.instanceMethodId(
    r'logI',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logI = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void logI(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logI(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logI(
            reference.pointer,
            _id_logI as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logD = _class.instanceMethodId(
    r'logD',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logD = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void logD(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logD(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logD(
            reference.pointer,
            _id_logD as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logW = _class.instanceMethodId(
    r'logW',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logW = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void logW(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logW(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logW(
            reference.pointer,
            _id_logW as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logE = _class.instanceMethodId(
    r'logE',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logE = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void logE(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logE(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logE(
            reference.pointer,
            _id_logE as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_logF = _class.instanceMethodId(
    r'logF',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
  );

  static final _logF = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int64,
                        _$jni.Int64,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void logF(java.lang.String string, java.lang.String string1, java.lang.String string2, int i, int i1, long j, long j1, java.lang.String string3)`
  void logF(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    int i,
    int i1,
    int j,
    int j1,
    _$jni.JString string3,
  ) {
    _logF(
            reference.pointer,
            _id_logF as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            i,
            i1,
            j,
            j1,
            string3.reference.pointer)
        .check();
  }

  static final _id_getLogLevel = _class.instanceMethodId(
    r'getLogLevel',
    r'()I',
  );

  static final _getLogLevel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getLogLevel()`
  int getLogLevel() {
    return _getLogLevel(
            reference.pointer, _id_getLogLevel as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_appenderClose = _class.instanceMethodId(
    r'appenderClose',
    r'()V',
  );

  static final _appenderClose = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void appenderClose()`
  void appenderClose() {
    _appenderClose(reference.pointer, _id_appenderClose as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_appenderFlush = _class.instanceMethodId(
    r'appenderFlush',
    r'(Z)V',
  );

  static final _appenderFlush = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void appenderFlush(boolean z)`
  void appenderFlush(
    bool z,
  ) {
    _appenderFlush(reference.pointer, _id_appenderFlush as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $Log_LogImp> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'logV(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V') {
        _$impls[$p]!.logV(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[6]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[7].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'logI(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V') {
        _$impls[$p]!.logI(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[6]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[7].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'logD(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V') {
        _$impls[$p]!.logD(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[6]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[7].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'logW(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V') {
        _$impls[$p]!.logW(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[6]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[7].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'logE(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V') {
        _$impls[$p]!.logE(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[6]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[7].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'logF(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V') {
        _$impls[$p]!.logF(
          $a[0].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[1].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[2].as(const _$jni.JStringType(), releaseOriginal: true),
          $a[3]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[6]
              .as(const _$jni.JLongType(), releaseOriginal: true)
              .longValue(releaseOriginal: true),
          $a[7].as(const _$jni.JStringType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d == r'getLogLevel()I') {
        final $r = _$impls[$p]!.getLogLevel();
        return _$jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'appenderClose()V') {
        _$impls[$p]!.appenderClose();
        return _$jni.nullptr;
      }
      if ($d == r'appenderFlush(Z)V') {
        _$impls[$p]!.appenderFlush(
          $a[0]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $Log_LogImp $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.tencent.mars.xlog.Log$LogImp',
      $p,
      _$invokePointer,
      [
        if ($impl.logV$async)
          r'logV(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
        if ($impl.logI$async)
          r'logI(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
        if ($impl.logD$async)
          r'logD(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
        if ($impl.logW$async)
          r'logW(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
        if ($impl.logE$async)
          r'logE(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
        if ($impl.logF$async)
          r'logF(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJLjava/lang/String;)V',
        if ($impl.appenderClose$async) r'appenderClose()V',
        if ($impl.appenderFlush$async) r'appenderFlush(Z)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Log_LogImp.implement(
    $Log_LogImp $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return Log_LogImp.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Log_LogImp {
  factory $Log_LogImp({
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logV,
    bool logV$async,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logI,
    bool logI$async,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logD,
    bool logD$async,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logW,
    bool logW$async,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logE,
    bool logE$async,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logF,
    bool logF$async,
    required int Function() getLogLevel,
    required void Function() appenderClose,
    bool appenderClose$async,
    required void Function(bool z) appenderFlush,
    bool appenderFlush$async,
  }) = _$Log_LogImp;

  void logV(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3);
  bool get logV$async => false;
  void logI(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3);
  bool get logI$async => false;
  void logD(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3);
  bool get logD$async => false;
  void logW(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3);
  bool get logW$async => false;
  void logE(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3);
  bool get logE$async => false;
  void logF(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3);
  bool get logF$async => false;
  int getLogLevel();
  void appenderClose();
  bool get appenderClose$async => false;
  void appenderFlush(bool z);
  bool get appenderFlush$async => false;
}

final class _$Log_LogImp with $Log_LogImp {
  _$Log_LogImp({
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logV,
    this.logV$async = false,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logI,
    this.logI$async = false,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logD,
    this.logD$async = false,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logW,
    this.logW$async = false,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logE,
    this.logE$async = false,
    required void Function(
            _$jni.JString string,
            _$jni.JString string1,
            _$jni.JString string2,
            int i,
            int i1,
            int j,
            int j1,
            _$jni.JString string3)
        logF,
    this.logF$async = false,
    required int Function() getLogLevel,
    required void Function() appenderClose,
    this.appenderClose$async = false,
    required void Function(bool z) appenderFlush,
    this.appenderFlush$async = false,
  })  : _logV = logV,
        _logI = logI,
        _logD = logD,
        _logW = logW,
        _logE = logE,
        _logF = logF,
        _getLogLevel = getLogLevel,
        _appenderClose = appenderClose,
        _appenderFlush = appenderFlush;

  final void Function(
      _$jni.JString string,
      _$jni.JString string1,
      _$jni.JString string2,
      int i,
      int i1,
      int j,
      int j1,
      _$jni.JString string3) _logV;
  final bool logV$async;
  final void Function(
      _$jni.JString string,
      _$jni.JString string1,
      _$jni.JString string2,
      int i,
      int i1,
      int j,
      int j1,
      _$jni.JString string3) _logI;
  final bool logI$async;
  final void Function(
      _$jni.JString string,
      _$jni.JString string1,
      _$jni.JString string2,
      int i,
      int i1,
      int j,
      int j1,
      _$jni.JString string3) _logD;
  final bool logD$async;
  final void Function(
      _$jni.JString string,
      _$jni.JString string1,
      _$jni.JString string2,
      int i,
      int i1,
      int j,
      int j1,
      _$jni.JString string3) _logW;
  final bool logW$async;
  final void Function(
      _$jni.JString string,
      _$jni.JString string1,
      _$jni.JString string2,
      int i,
      int i1,
      int j,
      int j1,
      _$jni.JString string3) _logE;
  final bool logE$async;
  final void Function(
      _$jni.JString string,
      _$jni.JString string1,
      _$jni.JString string2,
      int i,
      int i1,
      int j,
      int j1,
      _$jni.JString string3) _logF;
  final bool logF$async;
  final int Function() _getLogLevel;
  final void Function() _appenderClose;
  final bool appenderClose$async;
  final void Function(bool z) _appenderFlush;
  final bool appenderFlush$async;

  void logV(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3) {
    return _logV(string, string1, string2, i, i1, j, j1, string3);
  }

  void logI(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3) {
    return _logI(string, string1, string2, i, i1, j, j1, string3);
  }

  void logD(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3) {
    return _logD(string, string1, string2, i, i1, j, j1, string3);
  }

  void logW(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3) {
    return _logW(string, string1, string2, i, i1, j, j1, string3);
  }

  void logE(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3) {
    return _logE(string, string1, string2, i, i1, j, j1, string3);
  }

  void logF(_$jni.JString string, _$jni.JString string1, _$jni.JString string2,
      int i, int i1, int j, int j1, _$jni.JString string3) {
    return _logF(string, string1, string2, i, i1, j, j1, string3);
  }

  int getLogLevel() {
    return _getLogLevel();
  }

  void appenderClose() {
    return _appenderClose();
  }

  void appenderFlush(bool z) {
    return _appenderFlush(z);
  }
}

final class $Log_LogImp$Type extends _$jni.JObjType<Log_LogImp> {
  @_$jni.internal
  const $Log_LogImp$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/tencent/mars/xlog/Log$LogImp;';

  @_$jni.internal
  @_$core.override
  Log_LogImp fromReference(_$jni.JReference reference) =>
      Log_LogImp.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Log_LogImp$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Log_LogImp$Type) && other is $Log_LogImp$Type;
  }
}

/// from: `com.tencent.mars.xlog.Log`
class Log extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Log> $type;

  @_$jni.internal
  Log.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'com/tencent/mars/xlog/Log');

  /// The type which includes information such as the signature of this class.
  static const type = $Log$Type();

  /// from: `static public final int LEVEL_VERBOSE`
  static const LEVEL_VERBOSE = 0;

  /// from: `static public final int LEVEL_DEBUG`
  static const LEVEL_DEBUG = 1;

  /// from: `static public final int LEVEL_INFO`
  static const LEVEL_INFO = 2;

  /// from: `static public final int LEVEL_WARNING`
  static const LEVEL_WARNING = 3;

  /// from: `static public final int LEVEL_ERROR`
  static const LEVEL_ERROR = 4;

  /// from: `static public final int LEVEL_FATAL`
  static const LEVEL_FATAL = 5;

  /// from: `static public final int LEVEL_NONE`
  static const LEVEL_NONE = 6;
  static final _id_toastSupportContext = _class.staticFieldId(
    r'toastSupportContext',
    r'Landroid/content/Context;',
  );

  /// from: `static public android.content.Context toastSupportContext`
  /// The returned object must be released after use, by calling the [release] method.
  static context_.Context get toastSupportContext =>
      _id_toastSupportContext.get(_class, const context_.$Context$Type());

  /// from: `static public android.content.Context toastSupportContext`
  /// The returned object must be released after use, by calling the [release] method.
  static set toastSupportContext(context_.Context value) =>
      _id_toastSupportContext.set(
          _class, const context_.$Context$Type(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Log() {
    return Log.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_setLogImp = _class.staticMethodId(
    r'setLogImp',
    r'(Lcom/tencent/mars/xlog/Log$LogImp;)V',
  );

  static final _setLogImp = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setLogImp(com.tencent.mars.xlog.Log$LogImp logImp)`
  static void setLogImp(
    Log_LogImp logImp,
  ) {
    _setLogImp(_class.reference.pointer, _id_setLogImp as _$jni.JMethodIDPtr,
            logImp.reference.pointer)
        .check();
  }

  static final _id_getImpl = _class.staticMethodId(
    r'getImpl',
    r'()Lcom/tencent/mars/xlog/Log$LogImp;',
  );

  static final _getImpl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public com.tencent.mars.xlog.Log$LogImp getImpl()`
  /// The returned object must be released after use, by calling the [release] method.
  static Log_LogImp getImpl() {
    return _getImpl(_class.reference.pointer, _id_getImpl as _$jni.JMethodIDPtr)
        .object(const $Log_LogImp$Type());
  }

  static final _id_appenderClose = _class.staticMethodId(
    r'appenderClose',
    r'()V',
  );

  static final _appenderClose = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public void appenderClose()`
  static void appenderClose() {
    _appenderClose(
            _class.reference.pointer, _id_appenderClose as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_appenderFlush = _class.staticMethodId(
    r'appenderFlush',
    r'(Z)V',
  );

  static final _appenderFlush = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public void appenderFlush(boolean z)`
  static void appenderFlush(
    bool z,
  ) {
    _appenderFlush(_class.reference.pointer,
            _id_appenderFlush as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getLogLevel = _class.staticMethodId(
    r'getLogLevel',
    r'()I',
  );

  static final _getLogLevel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public int getLogLevel()`
  static int getLogLevel() {
    return _getLogLevel(
            _class.reference.pointer, _id_getLogLevel as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setLevel = _class.staticMethodId(
    r'setLevel',
    r'(IZ)V',
  );

  static final _setLevel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `static public void setLevel(int i, boolean z)`
  static void setLevel(
    int i,
    bool z,
  ) {
    _setLevel(_class.reference.pointer, _id_setLevel as _$jni.JMethodIDPtr, i,
            z ? 1 : 0)
        .check();
  }

  static final _id_f = _class.staticMethodId(
    r'f',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _f = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void f(java.lang.String string, java.lang.String string1)`
  static void f(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _f(_class.reference.pointer, _id_f as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_e = _class.staticMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _e = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void e(java.lang.String string, java.lang.String string1)`
  static void e(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _e(_class.reference.pointer, _id_e as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_w = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _w = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void w(java.lang.String string, java.lang.String string1)`
  static void w(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _w(_class.reference.pointer, _id_w as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_i = _class.staticMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _i = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void i(java.lang.String string, java.lang.String string1)`
  static void i(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _i(_class.reference.pointer, _id_i as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_d = _class.staticMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _d = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void d(java.lang.String string, java.lang.String string1)`
  static void d(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _d(_class.reference.pointer, _id_d as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_v = _class.staticMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _v = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void v(java.lang.String string, java.lang.String string1)`
  static void v(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _v(_class.reference.pointer, _id_v as _$jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .check();
  }

  static final _id_f$1 = _class.staticMethodId(
    r'f',
    r'(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _f$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void f(java.lang.String string, java.lang.String string1, java.lang.Object[] objects)`
  static void f$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _f$1(
            _class.reference.pointer,
            _id_f$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_e$1 = _class.staticMethodId(
    r'e',
    r'(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _e$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void e(java.lang.String string, java.lang.String string1, java.lang.Object[] objects)`
  static void e$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _e$1(
            _class.reference.pointer,
            _id_e$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_w$1 = _class.staticMethodId(
    r'w',
    r'(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _w$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void w(java.lang.String string, java.lang.String string1, java.lang.Object[] objects)`
  static void w$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _w$1(
            _class.reference.pointer,
            _id_w$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_i$1 = _class.staticMethodId(
    r'i',
    r'(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _i$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void i(java.lang.String string, java.lang.String string1, java.lang.Object[] objects)`
  static void i$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _i$1(
            _class.reference.pointer,
            _id_i$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_d$1 = _class.staticMethodId(
    r'd',
    r'(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _d$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void d(java.lang.String string, java.lang.String string1, java.lang.Object[] objects)`
  static void d$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _d$1(
            _class.reference.pointer,
            _id_d$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_v$1 = _class.staticMethodId(
    r'v',
    r'(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _v$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void v(java.lang.String string, java.lang.String string1, java.lang.Object[] objects)`
  static void v$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _v$1(
            _class.reference.pointer,
            _id_v$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_printErrStackTrace = _class.staticMethodId(
    r'printErrStackTrace',
    r'(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V',
  );

  static final _printErrStackTrace = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void printErrStackTrace(java.lang.String string, java.lang.Throwable throwable, java.lang.String string1, java.lang.Object[] objects)`
  static void printErrStackTrace(
    _$jni.JString string,
    _$jni.JObject throwable,
    _$jni.JString string1,
    _$jni.JArray<_$jni.JObject> objects,
  ) {
    _printErrStackTrace(
            _class.reference.pointer,
            _id_printErrStackTrace as _$jni.JMethodIDPtr,
            string.reference.pointer,
            throwable.reference.pointer,
            string1.reference.pointer,
            objects.reference.pointer)
        .check();
  }

  static final _id_getSysInfo = _class.staticMethodId(
    r'getSysInfo',
    r'()Ljava/lang/String;',
  );

  static final _getSysInfo = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.lang.String getSysInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getSysInfo() {
    return _getSysInfo(
            _class.reference.pointer, _id_getSysInfo as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $Log$Type extends _$jni.JObjType<Log> {
  @_$jni.internal
  const $Log$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/tencent/mars/xlog/Log;';

  @_$jni.internal
  @_$core.override
  Log fromReference(_$jni.JReference reference) => Log.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Log$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Log$Type) && other is $Log$Type;
  }
}
